version: "3.8"
services:
  postgres:
    image: postgres:16
    container_name: ht_postgres
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    container_name: ht_redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10

  # kafka (optional): uncomment to experiment with async order processing
  # kafka:
  #   image: bitnami/kafka:3.8
  #   container_name: ht_kafka
  #   environment:
  #     KAFKA_CFG_NODE_ID: 0
  #     KAFKA_CFG_PROCESS_ROLES: broker,controller
  #     KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
  #     KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
  #     KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@localhost:9093
  #     KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     ALLOW_PLAINTEXT_LISTENER: "yes"
  #   ports:
  #     - "9092:9092"

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: ht_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command: ["--config.file=/etc/prometheus/prometheus.yml"]

  grafana:
    image: grafana/grafana:10.4.2
    container_name: ht_grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro

volumes:
  pgdata:
  grafana-data:
