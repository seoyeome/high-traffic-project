plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'
description = 'high-traffic-project'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    runtimeOnly 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Free port 8000 automatically before starting the app (macOS/Linux)
tasks.named('bootRun') {
    doFirst {
        def os = System.properties['os.name'].toLowerCase()
        if (os.contains('mac') || os.contains('nix') || os.contains('nux')) {
            try {
                exec {
                    commandLine 'bash', '-lc', 'PIDS=$(lsof -ti:8000 || true); if [ -n "$PIDS" ]; then echo "Killing processes on :8000 => $PIDS"; kill -9 $PIDS || true; fi'
                }
            } catch (Exception ignored) {
                // no-op
            }
        }
    }
}
